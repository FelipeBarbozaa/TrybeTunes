{"ast":null,"code":"var _jsxFileName = \"/home/felipe/Projetos/sd-017-project-trybetunes/src/pages/Album.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport getMusics from '../services/musicAPI';\nimport Header from '../components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Album extends React.Component {\n  constructor() {\n    super();\n\n    this.musicApi = async () => {\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props;\n      const music = await getMusics(id).then(res => res);\n      const collection = [];\n      const track = [];\n      music.filter(e => {\n        if (e.kind !== 'song') {\n          return collection.push(e);\n        }\n\n        return track.push(e);\n      });\n      const {\n        artworkUrl100,\n        artistName,\n        collectionName\n      } = collection[0];\n      this.setState({\n        load: false,\n        album: track,\n        info: {\n          title: collectionName,\n          image: artworkUrl100,\n          name: artistName\n        }\n      });\n    };\n\n    this.state = {\n      load: true,\n      album: [],\n      info: {\n        title: '',\n        image: '',\n        name: ''\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.musicApi();\n  }\n\n  render() {\n    const {\n      album,\n      load,\n      info: {\n        title,\n        image,\n        name\n      }\n    } = this.state;\n    console.log(album);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), load ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"carregando\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"album-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"albumId\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: image,\n            alt: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            \"data-testid\": \"album-name\",\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": \"artist-name\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sound\",\n          children: album.map(e => /*#__PURE__*/_jsxDEV(MusicCard, {\n            trackId: e.trackId,\n            trackName: e.trackName,\n            previewUrl: e.previewUrl\n          }, e.trackName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.objectOf(PropTypes.number)\n  })\n}.isRequired;\nexport default Album;","map":{"version":3,"sources":["/home/felipe/Projetos/sd-017-project-trybetunes/src/pages/Album.js"],"names":["React","PropTypes","getMusics","Header","Album","Component","constructor","musicApi","match","params","id","props","music","then","res","collection","track","filter","e","kind","push","artworkUrl100","artistName","collectionName","setState","load","album","info","title","image","name","state","componentDidMount","render","console","log","map","trackId","trackName","previewUrl","propTypes","shape","objectOf","number","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport getMusics from '../services/musicAPI';\nimport Header from '../components/Header';\n\nclass Album extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      load: true,\n      album: [],\n      info: {\n        title: '',\n        image: '',\n        name: '',\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.musicApi();\n  }\n\n  musicApi = async () => {\n    const { match: { params: { id } } } = this.props;\n    const music = await getMusics(id).then((res) => res);\n    const collection = [];\n    const track = [];\n    music.filter((e) => {\n      if (e.kind !== 'song') {\n        return collection.push(e);\n      }\n      return track.push(e);\n    });\n\n    const { artworkUrl100, artistName, collectionName } = collection[0];\n\n    this.setState({\n      load: false,\n      album: track,\n      info: {\n        title: collectionName,\n        image: artworkUrl100,\n        name: artistName,\n      },\n    });\n  }\n\n  render() {\n    const { album, load, info: { title, image, name } } = this.state;\n    console.log(album);\n    return (\n      <>\n        <Header />\n        { load\n          ? (\n            <p className=\"carregando\">Loading...</p>\n          ) : (\n            <div id=\"album-container\">\n              <div id=\"albumId\">\n                <img src={ image } alt={ name } />\n                <h2 data-testid=\"album-name\">{ title }</h2>\n                <p data-testid=\"artist-name\">{ name }</p>\n              </div>\n                <div className=\"sound\">\n              {album.map((e) => (\n                <MusicCard\n                  key={ e.trackName }\n                  trackId={ e.trackId }\n                  trackName={ e.trackName }\n                  previewUrl={ e.previewUrl }\n                />\n              ))}\n              </div>\n            </div>\n          )}\n      </>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.objectOf(PropTypes.number),\n  }),\n}.isRequired;\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}